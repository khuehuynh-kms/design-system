/* GLOBAL MIXINS
--------------------------------------------- */

/* AUTO SCALING FOR TYPE WITH MIN/MAX SIZES

  @param {Number}  $responsive  - Viewport-based size
  @param {Number}  $min         - Minimum font size (px)
  @param {Number}  $max         - Maximum font size (px) (optional)

  @param {Number}  $fallback    - Fallback for viewport-based units (optional)

  @example SCSS - 5vw size, 35px min & 150px max size + 50px fallback:

  @include responsive-font(5vw, 35px, 150px, 50px);
*/

@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}

// Reset

@mixin reset {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

// Used to prevent text selection on an element

@mixin prevent-user-select {
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
}

/// Used to hide an element visually, but keeping it accessible for
/// accessibility tools.

@mixin visually-hidden {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  height: 1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  // Need to make sure we override any existing styles.
  position: absolute !important;
  top: 0;
  width: 1px !important;
}

/// To be used on flex items. Resolves some common layout issues, such as
/// text truncation not respecting padding or breaking out of container.
/// https://css-tricks.com/flexbox-truncated-text/

@mixin layout-flex-fix {
  max-width: 100%;
  min-width: 0;
}

@mixin loading($width, $color: $color-blue) {
  &::before {
    border: 0.12em solid rgba(0, 0, 0, 0.1);
    border-radius: 500rem;
    content: '';
    height: $width;
    left: 50%;
    margin: -$width/2;
    position: absolute;
    top: 50%;
    width: $width;
  }

  &::after {
    -webkit-animation: button-spin 0.8s linear;
    animation: button-spin 0.8s linear;
    -webkit-animation-iteration-count: infinite;
    animation-iteration-count: infinite;
    border-color: $color transparent transparent;
    border-radius: 500rem;
    border-style: solid;
    border-width: 0.12em;
    box-shadow: 0 0 0 1px transparent;
    content: '';
    height: $width;
    left: 50%;
    margin: -$width/2;
    position: absolute;
    top: 50%;
    width: $width;
  }

  @-webkit-keyframes button-spin {
    from {
      -webkit-transform: rotate(0deg);
      transform: rotate(0deg);
    }

    to {
      -webkit-transform: rotate(360deg);
      transform: rotate(360deg);
    }
  }

  @keyframes button-spin {
    from {
      -webkit-transform: rotate(0deg);
      transform: rotate(0deg);
    }

    to {
      -webkit-transform: rotate(360deg);
      transform: rotate(360deg);
    }
  }
}

/// BEM Block Element

@mixin element($element) {
  &__#{$element} {
    @content;
  }
}

/// BEM Block Modifier

@mixin modifier($modifier) {
  &--#{$modifier} {
    @content;
  }
}
